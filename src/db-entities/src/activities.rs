//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "activities")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub period_id: Date,
    #[sea_orm(unique)]
    pub start: DateTime,
    pub end: DateTime,
    pub activity: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::sleep_cycles::Entity",
        from = "Column::PeriodId",
        to = "super::sleep_cycles::Column::SleepId",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    SleepCycles,
}

impl Related<super::sleep_cycles::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SleepCycles.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
